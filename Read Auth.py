#!/usr/bin/python

#Use this script to sort the authentication logfile from /var/logs/auth.log for better overview and analysis. To change input file, change the value in the 6th line from auth.log to your filename.


logfile = open("auth.log", "r")
read = ["\nWelcome to the analysis of your auth.log. This file parts your auth.log into parts with a short explanation above. Not everything in this file is bad or wrong 'cause it wasn't interpreted, I used my own auth.log to learn from it and build this tool. I hope it helps you :)", "\n\n\n\n The following part shows everything that wasn't interpreted. That can be random stuff, commands execute by you and much more. Google things that looks suspicious to you.\n\n"]
root = ["\n\n\n\nThe following part shows attempts to connect to the user root (also if non-existend):\n\n"]
admin = ["\n\n\n\nThe following part shows attempts to connect to the user admin (also if non-existend):\n\n"]
pi = ["\n\n\n\nThe following part shows attempts to connect to the user pi (also if non-existend):\n\n"]
invaliduser = ["\n\n\n\nThe following part shows attempts to connect to a non-existend user. It can be made mostly by accessing the wrong server, special attacks against vulerable software, random attacks or mistakes by youself:\n\n"]
authenticationfailure = ["\n\n\n\nThe following part shows failures while connecting to a existend user. It while be generated by maybe yourself and attacks against your system:\n\n"]
keyexchange = ["\n\n\n\nI think it's made by a logjam attack, but don't ask me:\n\n"]
sessions = ["\n\n\n\nOpened and closed sessions:\n\n"]
accepted = ["\n\n\n\nSucessful logins:\n\n"]
badprotocol = ["\n\n\n\nDon't ask me, something with a bad protocol as you can see:\n\n"]
sudo = ["\n\n\n\nTimes in which sudo permissions was requested:\n\n"]

for line in logfile.readlines():
    if line.find("]: ") == -1:
        line = line[line.find("sudo: "):]
    else:
        line = line[line.find("]: ")+3:]
    if line.find("pam_unix(cron:session): session opened for user root by (uid=0)") != -1:
        pass
    elif line.find("pam_unix(cron:session): session closed for user root") != -1:
        pass
    elif line.find("Connection closed by") != -1 and line.find("[preauth]") != -1:
        pass
    elif line.find("Failed password for root") != -1:
        pass
    elif line.find("Received disconnect from") != -1 and line.find("[preauth]") != -1:
        pass
    elif line.find("Disconnected from") != -1 and line.find("[preauth]") != -1:
        pass
    elif line.find("check pass; user unknown") != -1:
        pass
    elif line.find("Too many authentication failures") != -1:
        pass
    elif line.find("PAM service(sshd) ignoring max retries;") != -1:
        pass
    elif line.find("Did not receive identification string") != -1: #Rly harmless?
        pass
    elif line.find("Server listening on") != -1:
        pass
    elif line.find("New seat seat0.") != -1:
        pass
    elif line.find("Received signal 15; terminating.") != -1:
        pass
    elif line.find("Watching system buttons on /dev/input/event0 (Power Button)") != -1:
        pass
    elif line.find("Creating /run/nologin, blocking further logins...") != -1:
        pass
    elif line.find("Connection reset by") != -1 and line.find("[preauth]") != -1:
        pass
    elif line.find("invalid user root") != -1 or line.find("Invalid user root") != -1:
        root.append(line)
    elif line.find("authentication failure;") != -1 and line.find("user=root") != -1:
        root.append(line)
    elif line.find("authentication failures;") != -1 and line.find("user=root") != -1:
        root.append(line)
    elif line.find("invalid user admin") != -1 or line.find("Invalid user admin") != -1:
        admin.append(line)
    elif line.find("authentication failure;") != -1 and line.find("user=admin") != -1:
        admin.append(line)
    elif line.find("authentication failures;") != -1 and line.find("user=admin") != -1:
        admin.append(line)
    elif line.find("invalid user pi") != -1 or line.find("Invalid user pi") != -1:
        pi.append(line)
    elif line.find("authentication failure;") != -1 and line.find("user=pi") != -1:
        pi.append(line)
    elif line.find("authentication failures;") != -1 and line.find("user=pi") != -1:
        pi.append(line)
    elif line.find("Invalid user") != -1 or line.find("invalid user") != -1:
        invaliduser.append(line)
    elif line.find("authentication failure;") != -1:
        authenticationfailure.append(line)
    elif line.find("maximum authentication attempts") != -1:
        authenticationfailure.append(line)
    elif line.find("no matching key exchange") != -1:
        keyexchange.append(line)
    elif line.find("no matching cipher found") != -1:
        keyexchange.append(line)
    elif line.find("New session") != -1:
        sessions.append(line)
    elif line.find("Removed session") != -1:
        sessions.append(line)
    elif line.find("session opened for") != -1:
        sessions.append(line)
    elif line.find("session closed for") != -1:
        sessions.append(line)
    elif line.find("Accepted password for") != -1:
        accepted.append(line)
    elif line.find("Bad protocol version") != -1:
        badprotocol.append(line)
    elif line.find("sudo:") != -1:
        sudo.append(line)
    else:
        read.append(line)

logfile.close()
logfile = open("authanalysed.log", "w")

whole = read + accepted + sessions + sudo + root + admin + pi + invaliduser + authenticationfailure + keyexchange + badprotocol
logfile.writelines(whole)
logfile.close()
